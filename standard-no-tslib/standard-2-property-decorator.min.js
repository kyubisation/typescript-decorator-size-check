var __esDecorate=this&&this.__esDecorate||function(e,t,a,r,n,s){function i(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var o,c=r.kind,l="getter"===c?"get":"setter"===c?"set":"value",m=!t&&e?r.static?e:e.prototype:null,u=t||(m?Object.getOwnPropertyDescriptor(m,r.name):{}),_=!1,p=a.length-1;p>=0;p--){var f={};for(var h in r)f[h]="access"===h?{}:r[h];for(var h in r.access)f.access[h]=r.access[h];f.addInitializer=function(e){if(_)throw new TypeError("Cannot add initializers after decoration has completed");s.push(i(e||null))};var d=(0,a[p])("accessor"===c?{get:u.get,set:u.set}:u[l],f);if("accessor"===c){if(void 0===d)continue;if(null===d||"object"!=typeof d)throw new TypeError("Object expected");(o=i(d.get))&&(u.get=o),(o=i(d.set))&&(u.set=o),(o=i(d.init))&&n.unshift(o)}else(o=i(d))&&("field"===c?n.unshift(o):u[l]=o)}m&&Object.defineProperty(m,r.name,u),_=!0},__runInitializers=this&&this.__runInitializers||function(e,t,a){for(var r=arguments.length>2,n=0;n<t.length;n++)a=r?t[n].call(e,a):t[n].call(e);return r?a:void 0};import{LitElement}from"lit";import{property}from"lit/decorators.js";let MyElement=(()=>{let e,t,a=LitElement,r=[],n=[],s=[],i=[];return class extends a{static{const o="function"==typeof Symbol&&Symbol.metadata?Object.create(a[Symbol.metadata]??null):void 0;e=[property()],t=[property()],__esDecorate(this,null,e,{kind:"accessor",name:"name",static:!1,private:!1,access:{has:e=>"name"in e,get:e=>e.name,set:(e,t)=>{e.name=t}},metadata:o},r,n),__esDecorate(this,null,t,{kind:"accessor",name:"name2",static:!1,private:!1,access:{has:e=>"name2"in e,get:e=>e.name2,set:(e,t)=>{e.name2=t}},metadata:o},s,i),o&&Object.defineProperty(this,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:o})}#e=__runInitializers(this,r,"");get name(){return this.#e}set name(e){this.#e=e}#t=(__runInitializers(this,n),__runInitializers(this,s,""));get name2(){return this.#t}set name2(e){this.#t=e}constructor(){super(...arguments),__runInitializers(this,i)}}})();export{MyElement};